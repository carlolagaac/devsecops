#!/bin/bash

# Set strict error handling
set -euo pipefail

# Define colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Define log functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Function to check command success
check_command() {
    if [ $? -ne 0 ]; then
        log_error "$1"
        exit 1
    fi
}

# Function to configure system settings
configure_system() {
    log_info "Configuring system settings..."
    
    # Create or update bash configuration
    if [ ! -f "${HOME}/.bashrc" ]; then
        touch "${HOME}/.bashrc"
    fi
    
    # Remove existing prompt settings if they exist
    sed -i '/force_color_prompt/d' "${HOME}/.bashrc"
    sed -i '/PS1=/d' "${HOME}/.bashrc"
    
    # Add new prompt settings
    {
        echo "force_color_prompt=yes"
        echo 'PS1="\[\e[01;36m\]\u\[\e[01;37m\]@\[\e[01;33m\]\H\[\e[01;37m\]:\[\e[01;32m\]\w\[\e[01;37m\]\$\[\033[0;37m\] "'
    } >> "${HOME}/.bashrc"

    # Source bashrc only if running in an interactive shell
    if [[ $- == *i* ]]; then
        source "${HOME}/.bashrc"
    fi
}

# Function to update system packages
update_system() {
    log_info "Updating system packages..."
    dnf update -y
    dnf upgrade -y
    dnf install -y dnf-plugins-core
}

# Function to configure networking
configure_networking() {
    log_info "Configuring networking..."
    
    # Disable firewalld and install iptables
    systemctl disable --now firewalld
    dnf install -y iptables iproute-tc

    # Configure kernel modules
    cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
    modprobe overlay
    modprobe br_netfilter

    # Configure sysctl parameters
    cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
    sysctl --system
}

# Function to configure security settings
configure_security() {
    log_info "Configuring security settings..."
    sed -i 's/\(SELINUX=\)\(enforcing\|permissive\)/\1disabled/' /etc/selinux/config
}

# Function to disable swap
disable_swap() {
    log_info "Disabling swap..."
    
    # Disable all swap first
    swapoff -a || true
    
    # Remove zram if it exists
    if systemctl list-units --type service | grep -q "swap-create@zram0"; then
        systemctl stop swap-create@zram0
    fi

    # Remove zram package if installed
    if rpm -q zram-generator-defaults >/dev/null 2>&1; then
        dnf remove -y zram-generator-defaults
    fi

    # Ensure zram device is off if it exists
    if [ -e /dev/zram0 ]; then
        swapoff -a || true
    fi

    # Disable swap in fstab
    sed -i '/\sswap\s/d' /etc/fstab

    # Verify swap is disabled
    if [ "$(swapon --show)" ]; then
        log_error "Failed to disable swap"
        exit 1
    else
        log_info "Swap disabled successfully"
    fi
}


# Function to install Docker
install_docker() {
    log_info "Installing Docker..."
    
    # Add Docker repository
    curl -fsSL https://download.docker.com/linux/fedora/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo
    check_command "Failed to add Docker repository"
    
    # Install Docker packages
    dnf install -y docker-ce docker-ce-cli containerd
    check_command "Failed to install Docker"

    # Configure Docker daemon
    mkdir -p /etc/docker
    cat > /etc/docker/daemon.json <<EOF
{
    "exec-opts": ["native.cgroupdriver=systemd"],
    "log-driver": "json-file",
    "storage-driver": "overlay2"
}
EOF
    mkdir -p /etc/systemd/system/docker.service.d

    # Start and enable Docker
    systemctl daemon-reload
    systemctl enable docker
    systemctl start docker
    check_command "Failed to start Docker service"
}

# Function to install Kubernetes components
install_kubernetes() {
    log_info "Installing Kubernetes components..."
    
    # Install basic tools
    dnf install -y vim gcc gcc-c++ make jq python3-pip dmidecode
    
    # Get latest Kubernetes version
    KUBE_LATEST=$(curl -L -s https://dl.k8s.io/release/stable.txt | awk 'BEGIN { FS="." } { printf "%s.%s", $1, $2 }')
    
    # Add Kubernetes repository
    cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/${KUBE_LATEST}/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/${KUBE_LATEST}/rpm/repodata/repomd.xml.key
EOF

    # Install Kubernetes packages
    dnf install -y kubelet kubeadm kubectl
    pip3 install jc
    
    systemctl enable kubelet
}

# Function to initialize Kubernetes cluster
init_kubernetes() {
    log_info "Initializing Kubernetes cluster..."
    
    rm -f /root/.kube/config
    kubeadm reset -f

    # Configure containerd
    mkdir -p /etc/containerd
    containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' > /etc/containerd/config.toml
    systemctl restart containerd

    # Initialize cluster
    kubeadm init --pod-network-cidr '10.244.0.0/16' --service-cidr '10.96.0.0/16' --skip-token-print

    # Configure kubectl
    mkdir -p ~/.kube
    cp -i /etc/kubernetes/admin.conf ~/.kube/config

    # Install Calico CNI
    kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
    kubectl rollout status daemonset calico-node -n kube-system --timeout=90s

    # Untaint control plane node
    log_info "Untainting control plane node..."
    node=$(kubectl get nodes -o=jsonpath='{.items[0].metadata.name}')
    for taint in $(kubectl get node $node -o jsonpath='{range .spec.taints[*]}{.key}{":"}{.effect}{"-"}{end}'); do
        kubectl taint node $node $taint-
    done
}

# Function to install Java and Maven
install_java_maven() {
    log_info "Installing Java and Maven..."
    dnf install -y java-11-openjdk java-11-openjdk-devel maven
    java -version
    mvn -v
}

# Function to install Jenkins
install_jenkins() {
    log_info "Installing Jenkins..."
    
    wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
    rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
    dnf install -y jenkins
    
    systemctl daemon-reload
    systemctl enable jenkins
    systemctl start jenkins
    
    usermod -a -G docker jenkins
    echo "jenkins ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
}

# Main installation process
main() {
    log_info "Starting installation process..."
    
    configure_system
    update_system
    configure_networking
    configure_security
    disable_swap
    install_docker
    install_kubernetes
    init_kubernetes
    install_java_maven
    install_jenkins
    
    log_info "Installation completed successfully!"
}

# Execute main function
main
